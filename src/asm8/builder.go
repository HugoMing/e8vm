package asm8

import (
	"io"
)

// Gen is an interface for generating a compiled object.
type Gen interface {
	Register(b *Builder, block interface{})
	Gen(b *Builder) interface{}
}

// Builder manipulates an AST, checks its syntax, and builds the assembly
type Builder struct {
	p     *Parser
	errs  *ErrList
	scope *SymScope

	Gen Gen
}

func newBuilder(file string, r io.ReadCloser) *Builder {
	ret := new(Builder)
	ret.p = NewParser(file, r)
	ret.errs = NewErrList()
	ret.scope = NewSymScope()

	return ret
}

// Build builds the blocks generated by the parser.
func (b *Builder) Build() (interface{}, []*Error) {
	var blocks []interface{}

	for {
		block := b.p.Block()
		if block == nil {
			break
		}
		blocks = append(blocks, block)
	}

	// check for parsing errors
	errs := b.p.Errs()
	if errs != nil {
		return nil, errs
	}
	if b.Gen == nil {
		return int(0), nil
	}

	// register the blocks
	for _, block := range blocks {
		b.Gen.Register(b, block)
	}
	if b.errs.Errs != nil {
		return nil, b.errs.Errs
	}

	ret := b.Gen.Gen(b)
	// check for generation errors
	if b.errs.Errs != nil {
		return nil, b.errs.Errs
	}
	return ret, nil
}

// Err reports a building/semantics error.
func (b *Builder) err(p *Pos, f string, args ...interface{}) {
	b.errs.Addf(p, f, args...)
}
